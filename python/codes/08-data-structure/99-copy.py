# 할당 (주소가 복사되는 것)

'''가변의 경우'''
a = [1, 2, 3, 4] # a에 [1, 2, 3, 4]라는 리스트가 담긴 주소가 할당됨

b = a # b는 a가 바라보는 주소를 받음

print(b) # [1, 2, 3, 4]

b[0] = 100 # b가 바라보는 리스트의 0번째 index를 바꿈

print(b) # [100, 2, 3, 4] : 당연히 b[0]은 바뀜
print(a) # [100, 2, 3, 4] : b가 a와 같은 곳을 바라보고 있었기에 a[0]도 바뀌었음

# 복사가 발생하지 않았음. (두 객체가 별도의 객체가 아님)

'''불변의 경우'''
aa = 20 # aa는 20이 담긴 주소를 바라봄

bb = aa # bb 또한 aa와 같은 주소를 바라봄

bb = 10 # bb는 10이 담긴 새로운 주소를 바라봄 (재할당)

print(aa) # 20
print(bb) # 10 # 서로 연관

' ----------------------------- '

# 얕은 복사
aaa = [1, 2, 3]

bbb = aaa[:] # 이 과정에서 서로 다른 주소에 같은 값을 가진 객체를 생성하고 bbb가 바라보게 됨: 복사
ccc = aaa.copy() # 위 슬라이싱과 같은 맥락

bbb[0] = 100 
ccc[0] = 999

'''서로 다른 주소를 가졌기에, 어느 한 객체가 변경되어도 영향을 받지 않음'''
print(aaa) # [1, 2, 3]
print(bbb) # [100, 2, 3]
print(ccc) # [999, 2, 3]

# 얕은 복사의 한계 (lv.1까지만 복사가 가능함)
aaaa = [1, 2, [3, 4, 5]]

bbbb = aaaa[:]
cccc = aaaa.copy()

# lv.1 수준의 변화
bbbb[0] = 999
cccc[1] = 1234

# lv.2 수준의 변화
bbbb[2][1] = 4000
cccc[2][2] = 5000

'''lv.1 수준에서는 복사가 발생했지만, lv.2 수준에서는 복사가 일어나지 않았음.'''
print(aaaa) # [1, 2, [3, 4000, 5000]]
print(bbbb) # [999, 2, [3, 4000, 5000]]
print(cccc) # [1, 1234, [3, 4000, 5000]]

# 깊은 복사 (모듈 필요)
import copy

aaaaa = [1, 2, [3, 4, 5]]

bbbbb = copy.deepcopy(aaaaa)
ccccc = copy.deepcopy(aaaaa)

# lv.1 수준의 변화
bbbbb[0] = 999
ccccc[1] = 1234

# lv.2 수준의 변화
bbbbb[2][1] = 4000
ccccc[2][2] = 5000

'''lv.1은 물론 lv.2 수준에서도 완전한 복사가 이루어짐'''
print(aaaaa) # [1, 2, [3, 4, 5]]
print(bbbbb) # [999, 2, [3, 4000, 5]]
print(ccccc) # [1, 1234, [3, 4, 5000]]

